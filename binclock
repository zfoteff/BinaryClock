#!/usr/bin/env python3
"""
@Author: zfoteff
@Version: 1.0.0
"""
from tkinter import *
import datetime
import time

#   generate the 2d grid representing the current time
def generate_time_grid():
    curr_time_grid = []
    t = time.strftime("%H%M%S")

    for digit in t:
        curr_time_grid.append(list(bin(int(digit))[2:].rjust(4,"0")))

    return curr_time_grid

#   create 6x4 grid for representing the binary clock
def create_clock(canvas, root):
    #   hour segments
    h00 = canvas.create_rectangle(10,10,60,60, outline="white", tag="h00")
    h01 = canvas.create_rectangle(10,70,60,120, outline="white", tag="h01")
    h02 = canvas.create_rectangle(10,130,60,180, outline="white", tag="h02")
    h03 = canvas.create_rectangle(10,190,60,240, outline="white", tag="h03")
    h10 = canvas.create_rectangle(70,10,120,60, outline="white", tag="h10")
    h11 = canvas.create_rectangle(70,70,120,120, outline="white", tag="h11")
    h12 = canvas.create_rectangle(70,130,120,180, outline="white", tag="h12")
    h13 = canvas.create_rectangle(70,190,120,240, outline="white", tag="h13")

    #   minute segments
    m00 = canvas.create_rectangle(140,10,190,60, outline="white", tag="m00")
    m01 = canvas.create_rectangle(140,70,190,120, outline="white", tag="m01")
    m02 = canvas.create_rectangle(140,130,190,180, outline="white", tag="m02")
    m03 = canvas.create_rectangle(140,190,190,240, outline="white", tag="m03")
    m10 = canvas.create_rectangle(200,10,250,60, outline="white", tag="m10")
    m11 = canvas.create_rectangle(200,70,250,120, outline="white", tag="m11")
    m12 = canvas.create_rectangle(200,130,250,180, outline="white", tag="m12")
    m13 = canvas.create_rectangle(200,190,250,240, outline="white", tag="m13")

    #   second segments
    s00 = canvas.create_rectangle(270,10,320,60, outline="white", tag="s00")
    s01 = canvas.create_rectangle(270,70,320,120, outline="white", tag="s01")
    s02 = canvas.create_rectangle(270,130,320,180, outline="white", tag="s02")
    s03 = canvas.create_rectangle(270,190,320,240, outline="white", tag="s03")
    s10 = canvas.create_rectangle(330,10,380,60, outline="white", tag="s10")
    s11 = canvas.create_rectangle(330,70,380,120, outline="white", tag="s11")
    s12 = canvas.create_rectangle(330,130,380,180, outline="white", tag="s12")
    s13 = canvas.create_rectangle(330,190,380,240, outline="white", tag="s13")

    #   colons
    colon01 = canvas.create_oval(125, 110, 135, 120, fill="white", outline="white")
    colon02 = canvas.create_oval(125, 130, 135, 140, fill="white", outline="white")
    colon11 = canvas.create_oval(255, 110, 265, 120, fill="white", outline="white")
    colon12 = canvas.create_oval(255, 130, 265, 140, fill="white", outline="white")

#   update each section to be on or off corresponding with each number's binary representation
def draw_time(canvas, root, time):
    #   flag to help determine which time column the time should be drawn to
    first_flag = True
    #   tag to determine whether time should be written to hours, mins, or seconds
    column_tag = "h"

    for i in range(6):
        if i % 2 == 0:
            first_flag = True
        else:
            first_flag = False

        if i == 0 or i == 1:
            column_tag = "h"
        elif i==2 or i==3:
            column_tag = "m"
        elif i==4 or i==5:
            column_tag = "s"

        for j in range(4):
            tag_str = ""
            #   create the tag for each element based on if they number should be in first column for the section
            if first_flag:
                tag_str = "{col}0{id}".format(col=column_tag, id=str(j))
            else:
                tag_str = "{col}1{id}".format(col=column_tag, id=str(j))

            #   Update items based on if they should be on in the clock
            if time[i][j] == "0":
                canvas.itemconfig(tag_str, fill="")
            elif time[i][j] == "1":
                canvas.itemconfig(tag_str, fill="white")

    canvas.pack()

def main():
    root = Tk()
    root.title("Binary Clock")
    c = Canvas(root, bg="grey", height=250, width=390)
    create_clock(c, root)

    while True:
        draw_time(c, root, generate_time_grid())
        root.update()
        time.sleep(1)

main()
